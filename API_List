
## Accounts (/auth/)
Public (AllowAny):
1. POST /auth/sign_up/  
   Purpose: Solo or business signup (role field: solo or business/company).  
   Body: For solo: email, password, name, phone, optional referral_code. For business: nested payload (basic, payment, subscription, etc.).  
   Returns tokens.

2. POST /auth/login/  
   Body: email, password, role (solo/company/rep or employee), optional type=web (forces company)  
   Returns access + refresh tokens.

3. POST /auth/social_login/  
   Body: provider (google|facebook|apple), token  
   Returns tokens (creates user if new; role=solo).

4. POST /auth/send_otp/  
   Body: email or phone, role  
   Sends OTP for password reset.

5. POST /auth/verify_otp/  
   Body: email or phone, otp  
   Returns temp_token (10 min) for password reset.

6. POST /auth/reset_password/  
   (CreateNewPasswordView)  
   Body: temp_token, new_password  
   Resets password (from OTP flow) and returns new login tokens.

7. POST /auth/check_email/  
   Body: email  
   Checks availability (returns error if exists).

8. GET /auth/delete/  
   (DeleteUsersByIdsView – appears to be a diagnostic/delete test; currently commented out actual delete)  
   No params – returns hardcoded list of IDs targeted.

Authenticated (Bearer required):
9. POST /auth/logout/  
   Marks user inactive (does not blacklist tokens currently).

10. POST /auth/get_user/  
    Returns current user profile (business info if exists).

11. POST /auth/update_user/  
    Body: updatable fields (full_name, phone, optional business_info{}).  
    File upload: image (multipart).

12. GET /auth/update_user/  
    Returns current user profile (alternate read).

13. POST /auth/employees/  
    (EmployeeManagementView.post) Invite new employee. Body: email, name.

14. GET /auth/employees/  
    List employees under company.

15. PUT /auth/employees/  
    Update employee (id + fields email/name/phone).

16. DELETE /auth/employees/?id=<employee_id>  
    Delete an employee.

17. POST /auth/employees_post/  
    (TestEmployeeManagementView) ALSO lists employees (duplicate variant; used for testing).

18. POST /auth/set_employee_password/  
    For an employee user to set initial password. Body: new_password (only if is_passwordSet is False).

19. GET /auth/employee_reset_password/?id=<employee_id>  
    Resets employee password (regenerates & emails).

20. POST /auth/update_password/  
    (ResetPasswordView) Body: current_password, new_password.

21. POST /auth/account_deletion/  
    (AccountDeletionView) Body: temp_token (OTP-like). Marks user deleted (soft delete: modifies email/phone, sets flags).

## Referral Module (/refer/)
All endpoints require authentication.

1. GET /refer/companies_list/  
   List companies with favorite flag (excludes self).

2. POST /refer/favorite/  
   Body: company_id – toggles favorite (adds if not exists, removes if exists).

3. DELETE /refer/favorite/  
   Body: company_id – explicit removal (if exists).

4. POST /refer/send_referral/  
   Body: company_id, referred_to_email, referred_to_name, referred_to_phone (optional), reason (service_type), urgency_level, request_description, privacy (bool), permission_consent (bool).  
   Creates referral and emails referred_to.

5. POST /refer/accept_referral/  
   (SendAcceptView – not shown in snippet but imported; assume accepts referral)  
   Likely Body: referral_id / status (not visible; you may confirm in views later).

6. POST /refer/list_referral/  
   (ListReferralView – not shown; presumably company-level listing.)

7. POST /refer/list_solo_referral/  
   Body: referral_type = referred_by | referred_to.

8. POST /refer/list_company_referral/  
   Company-specific referral list (implementation not shown).

9. POST /refer/list_rep_referral/  
   Rep-specific referral list.

10. POST /refer/list_assigned_referral/  
    Assigned referrals listing.

11. POST /refer/assign_rep/  
    Body: referral_id, employee_id (nullable), notes, status (accept/reject affects referral/company_approval logic).

12. POST /refer/complete_referral/  
    (CompleteReferralView – probably marks referral complete).

13. POST /refer/update_referral_privacy/  
    Body: referral_id, privacy (bool).

14. POST /refer/add_manually/  
    (SendAppInvitationView – likely invites user to app.)

Notes: Some referenced classes (ListReferralView, CompleteReferralView, etc.) weren’t fully read here, so confirm payloads if needed. Status transitions: assign_rep updates referral.status to cancelled if status=reject else in_progress; company_approval flag toggled.

## Chat Module (/chat/)
All endpoints require authentication. Dynamic path segments: <room_id> is string (room UUID or slug).

1. GET /chat/rooms/  
   List chat rooms for current user (role-based filtering, includes unread counts).

2. POST /chat/rooms/create/  
   Body: referral_id, solo_user_id.  
   Business rule: 
   - employee must be assigned to referral
   - individual business can create directly
   - other companies must assign a rep first.

3. GET /chat/rooms/<room_id>/  
   Get room details + paginated messages. Query params: page (default 1), page_size (default 50). Marks messages read.

4. PATCH /chat/rooms/<room_id>/update/  
   Body: is_active (optional). Only company owner can update.

5. POST /chat/rooms/<room_id>/messages/  
   Body: text (or message fields per serializer), optional attachments (unclear; uploads handled separately). Creates message if user can send.

File & Media Upload:
6. POST /chat/upload/media/  
   (MediaUploadView) Likely multipart (file). Returns stored media URL/presign.

7. POST /chat/upload/voice/  
   Upload voice message (multipart: audio file).

8. POST /chat/upload/preview/  
   Possibly returns image preview/presign (check code if needed).

Analytics:
9. GET /chat/analytics/  
   Returns counts: total, active, messages_last_30_days, unread_messages, active_conversations_last_7_days.

## Media / File Handling
- User profile update: /auth/update_user/ (multipart with image)
- Chat uploads: /chat/upload/* endpoints
- S3 presigned URLs generated via `generate_presigned_url` (expiry 3600s)

## Authentication & Tokens
- JWT: `/auth/login/` or `/auth/sign_up/` returns:
  {
    "tokens": { "access": "<...>", "refresh": "<...>" }
  }
- Authorization header required for all non-AllowAny endpoints:
  Authorization: Bearer <access_token>
- Token lifetime: access 600 minutes, refresh 7 days (rotating). Refresh endpoint not explicitly exposed; you can call standard `/api/token/refresh/` if added later (not present now).

## Status / Domain Entities
- User roles: solo, company, employee (rep)
- Referral lifecycle statuses: created → in_progress → (possibly completed/cancelled)
- Assignment uses `ReferralAssignment`, updates referral status and approval flags.

## Suggested Test Order (Smoke)
1. POST /auth/sign_up/ (solo) → get tokens
2. POST /auth/login/ → verify tokens
3. POST /auth/send_otp/ → POST /auth/verify_otp/ → POST /auth/reset_password/
4. POST /auth/update_user/ (multipart image)
5. Company signup path to test subscription & stripe (needs valid card data)
6. Company: invite employee → employee login → set_employee_password
7. Create referral (solo → company) /refer/send_referral/
8. Company: assign rep /refer/assign_rep/
9. Employee: create chat room /chat/rooms/create/
10. Send messages, list rooms, fetch room detail with pagination
11. Chat analytics
12. Favorite a company /refer/favorite/

## Endpoint Matrix (Condensed)
Format: METHOD PATH (Auth?) - Purpose
- POST /auth/sign_up/ (Public) - Register solo/company
- POST /auth/login/ (Public) - Login
- POST /auth/social_login/ (Public) - Social login
- POST /auth/send_otp/ (Public) - Start password reset
- POST /auth/verify_otp/ (Public) - Verify OTP
- POST /auth/reset_password/ (Public) - Set new password after OTP
- POST /auth/check_email/ (Public) - Email availability
- GET  /auth/delete/ (Public/Test) - Diagnostic deletion listing
- POST /auth/logout/ (Auth) - Deactivate session
- POST /auth/get_user/ (Auth) - Get profile
- POST /auth/update_user/ (Auth) - Update profile (multipart)
- GET  /auth/update_user/ (Auth) - Get profile (alt)
- POST /auth/employees/ (Auth company) - Invite employee
- GET  /auth/employees/ (Auth company) - List employees
- PUT  /auth/employees/ (Auth company) - Update employee
- DELETE /auth/employees/?id= (Auth company) - Delete employee
- POST /auth/employees_post/ (Auth) - List employees (test variant)
- POST /auth/set_employee_password/ (Auth employee) - Initial password set
- GET  /auth/employee_reset_password/?id= (Auth company) - Reset employee pwd
- POST /auth/update_password/ (Auth) - Change own password
- POST /auth/account_deletion/ (Auth) - Soft delete account
- GET  /refer/companies_list/ (Auth) - List companies & favorites
- POST /refer/favorite/ (Auth) - Toggle favorite add/remove (also supports delete)
- DELETE /refer/favorite/ (Auth) - Remove favorite explicitly
- POST /refer/send_referral/ (Auth) - Create referral
- POST /refer/accept_referral/ (Auth) - Accept referral (assumed)
- POST /refer/list_referral/ (Auth) - List referrals (general)
- POST /refer/list_solo_referral/ (Auth) - Solo referral listing by type
- POST /refer/list_company_referral/ (Auth) - Company referrals
- POST /refer/list_rep_referral/ (Auth) - Rep referrals
- POST /refer/list_assigned_referral/ (Auth) - Assigned referrals
- POST /refer/assign_rep/ (Auth company) - Assign or update rep
- POST /refer/complete_referral/ (Auth) - Complete referral
- POST /refer/update_referral_privacy/ (Auth) - Toggle privacy
- POST /refer/add_manually/ (Auth) - Invite/app download (?) 
- GET  /chat/rooms/ (Auth) - List chat rooms
- POST /chat/rooms/create/ (Auth) - Create chat room for referral
- GET  /chat/rooms/<room_id>/ (Auth) - Room detail + messages (pagination)
- PATCH /chat/rooms/<room_id>/update/ (Auth company owner) - Update room (is_active)
- POST /chat/rooms/<room_id>/messages/ (Auth) - Send message
- POST /chat/upload/media/ (Auth) - Upload media
- POST /chat/upload/voice/ (Auth) - Upload voice
- POST /chat/upload/preview/ (Auth) - Image preview/presign
- GET  /chat/analytics/ (Auth) - Chat analytics

## Typical Request Samples (JSON Bodies)
Signup (solo):
{
  "role": "solo",
  "email": "test@example.com",
  "password": "Passw0rd!",
  "name": "Test User",
  "phone": "+15550001111",
  "referral_code": "ABC123"   // optional
}

Login:
{
  "email": "test@example.com",
  "password": "Passw0rd!",
  "role": "solo"
}

Send Referral:
{
  "company_id": 12,
  "referred_to_email": "client@example.com",
  "referred_to_name": "Client Name",
  "referred_to_phone": "+15550002222",
  "reason": "web_development",
  "urgency_level": "medium",
  "request_description": "Needs a website redesign",
  "privacy": false,
  "permission_consent": true
}

Assign Rep:
{
  "referral_id": 45,
  "employee_id": 78,
  "notes": "Follow up ASAP",
  "status": "accept"   // or reject
}

Create Chat Room:
{
  "referral_id": 45,
  "solo_user_id": 9
}

Send Message:
{
  "content": "Hello, thanks for the referral!"
  // plus any media IDs if serializer supports
}

Update Chat Room:
{
  "is_active": true
}

Update Referral Privacy:
{
  "referral_id": 45,
  "privacy": true
}

## Testing Considerations
- Pagination: /chat/rooms/<room_id>/?page=1&page_size=50
- Boolean fields must be true/false (not "true"/"false") if JSON.
- File uploads: use multipart/form-data.
- Error cases:
  - Duplicate email on signup
  - Employee setting password twice
  - Assigning rep without referral or employee existing
  - Creating chat room without proper role/assignment
- Soft deletion: AccountDeletionView doesn’t really delete rows; modifies fields.

## Missing / Potential Enhancements
- No refresh endpoint listed (consider adding /auth/token/refresh/ if needed).
- No explicit revoke/blacklist endpoint though SIMPLE_JWT is configured for rotation.
- Accept/complete referral endpoints’ exact request bodies should be validated (verify code if you need strict docs).
- Consistent naming: Some endpoints use underscores; consider future cleanup for REST standardization.

If you’d like, I can generate a Markdown or Swagger/OpenAPI draft spec next. Let me know if you want me to add missing view payload details by opening the remaining classes (e.g., Accept/CompleteReferral) or produce Postman collection JSON.

Want an OpenAPI schema or Postman export next? Just say the word.